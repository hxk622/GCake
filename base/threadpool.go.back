    fmt.Println("sent signalbool normal")
package base

import (
    "container/list"
    "fmt"
    "strconv"
)

type ThreadPool struct {
    // task, task should be a function, the function is about handle some thing of caculating, store or others,
    // it also should be a function for thread
    mutex_   *MutexLock
    cond_    *Condition
    name_    string
    threads_ []Thread
    running_ *bool
    queue_   *list.List // queue should store task, and the task  should be a function
    join_    bool
}

func NewThreadPool(name string, join bool) *ThreadPool {
    mutex_ := NewMutexLock()
    fmt.Printf("pool mutex %p\n", mutex_.mutex)
    cond_ := NewCondition(mutex_.mutex)
    name_ := name
    running_ := new(bool)
    *running_ = false
    queue_ := list.New()
    return &ThreadPool{
        mutex_:   mutex_,
        cond_:    cond_,
        name_:    name_,
        running_: running_,
        join_:    join,
        queue_:   queue_,
    }
}

// start thread pool, that is say that start thread function
func (t ThreadPool) start(numThreads int) {
    if len(t.threads_) != 0 {
        fmt.Println("ThreadPool start fail because of threads is not empty!!!")
        return
    }
    *t.running_ = true
    f := func(...interface{}) interface{} {
        for i := 0; i < numThreads; i++ {
            fmt.Println("start ", i, " thraed ")
            t.threads_ = append(t.threads_, NewThread(t.runInThread, strconv.Itoa(i), t.join_))
            // start thread
            t.threads_[i].start()
            fmt.Printf("pool-> %p\n", &t)
        }
        fmt.Println("finish all subthread start ....", len(t.threads_))
        fmt.Printf("\n 1 pool address: %p\n", &t)
        return nil
    }
    fmt.Printf("start pool: %p\n", &t)
    LockAndUnlock(t.mutex_, f)
}

func (t ThreadPool) stop() {
    f := func(...interface{}) interface{} {
        *t.running_ = false
        t.cond_.notifyAll()
        // wether waiting for sub thread exit signal
        if t.join_ {
            for _, k := range t.threads_ {
                k.join()
            }
        }
        return nil
    }
    LockAndUnlock(t.mutex_, f)
}

func (t ThreadPool) run(task func(args ...interface{}) interface{}) {
    fmt.Printf("\n2 pool address: %p\n", &t)
    if len(t.threads_) == 0 {
        fmt.Println("handle in main threads, sub num is ", len(t.threads_))
        task()
    } else {
        LockAndUnlock(t.mutex_, func(...interface{}) interface{} {
            t.queue_.PushFront(task)
            t.cond_.notify()
            return nil
        })
    }
}

func (t ThreadPool) take() interface{} {
    f := func(args ...interface{}) interface{} {
        for t.queue_.Len() == 0 && *t.running_ {
            fmt.Println("waiting task")
            t.cond_.wait()
        }
        fmt.Println("Get the task!!!")
        if t.queue_.Len() > 0 {
            e := t.queue_.Back()
            t.queue_.Remove(e)
            return e.Value
        } else {
            fmt.Println("Queue is empty!!NONONO")
            return nil
        }
    }
    LockAndUnlock(t.mutex_, f)
    return nil
}

func (t ThreadPool) runInThread(args ...interface{}) interface{} {
    defer func() {
        if e := recover(); e != nil {
            fmt.Println(e)
        }
    }()
    fmt.Printf("... runInThread ...%p\n", &t)
    // thread pool should be running
    for *t.running_ {
        task := t.take()
        switch tk := task.(type) {
        case func(...interface{}) interface{}:
            tk()
        default:
        }
    }
    return nil
}
